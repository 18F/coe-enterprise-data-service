## SYNTHETIC DATA PYTHON CODE
## This is the code used to generate the synthetic data used for the EDS prototype.
## The synthetic data is based on mainframe copybooks that specify data types and lengths.
## When the code has "i" listed, or in the notes, it means that you can replace the letter i with any number needed. For example, in copybook language, 9(8) means a number that is length 8. 
## In the copybook language, 9(i) means generating a number of the specified length, like 8, for 9(8). 
## V9(i) means a number that is in decimal format. The number before the decimal is included in the length i (So if it says V9(6) there would be 5 numbers after the decimal.
## 9(i)V9(j)) means a whole number length i followed by decimals length j. 
## X(i) is a VarChar, meaning it could be numbers, letters, or symbols, of the specified length i.


##This GENERATE A RANDOM LIST OF WHOLE NUMBERS IN SPECIFIED VALUE (for 9(i))

import random
for _ in range(1000):
    number = str(random.randint(0, 999999)).zfill(6)
    print(number)


##GENERATE A LIST OF DECIMALS NUMBERS (for V9(i))

from decimal import Decimal
import random
numbers = []
for _ in range(1000):
    number = random.uniform(0, 1)  # Generate a random float between 0 and 1
    number = Decimal(number).quantize(Decimal('0.00000'))  # Convert to V9(6) format
    numbers.append(number)
for number in numbers:
    print(number)

## GENERATE A LIST OF WHOLE NUMBERS WITH DECIMALS (for 9(i)V9(j))
import random
numbers = []
for _ in range(1000):
    whole_part = random.randint(0, 99)
    decimal_part = random.randint(0, 9999)
    number = f"{whole_part}.{decimal_part:04d}"
    numbers.append(number)
for number in numbers:
    print(number)

##GENERATE A LIST OF RANDOM NUMBERS AND LETTERS (for X(i))
import random
import string
for _ in range(1000):
    character = random.choice(string.ascii_uppercase + string.digits)
    print(character)

##GENERATE A LIST OF RANDOM DATES FOR A SPECIFIED RANGE IN MMDDYY FORMAT
import random
import calendar
import datetime
def generate_random_dates(start_date, end_date, count):
    dates = []
    for _ in range(count):
        year = random.randint(start_date.year, end_date.year)
        month = random.randint(1, 12)
        days_in_month = calendar.monthrange(year, month)[1]
        day = random.randint(1, days_in_month)
        year_last_two_digits = str(year)[2:]
        date = f"{month:02d}{day:02d}{year_last_two_digits}"
        dates.append(date)
    return dates
start_date = datetime.datetime(1980, 1, 1)
end_date = datetime.datetime(2020, 12, 31)
count = 1000
random_dates = generate_random_dates(start_date, end_date, count)
for date in random_dates:
    print(date)

##GENERATE A LIST OF 1000 UNIQUE NUMBERS, BUT THEYRE SEPERATED like (XX, XX). THE PURPOSE OF THIS IS  IF I NEED 2 NUMBERS THAT TOGETHER THEY WILL BE UNIQUE. THIS IS TO FORM TWO SEPERATE COLUMNS ONCE PASTED INTO EXCEL.

import random
def generate_unique_numbers(num_numbers):
    numbers = set()
    while len(numbers) < num_numbers:
        new_num = random.randint(999, 9999)
        numbers.add(new_num)
    return numbers
# Generating 1000 unique random numbers
random_numbers = generate_unique_numbers(1000)
# Printing each number on its own line with a comma between the first and second two numbers
for num in random_numbers:
    first_two_digits = str(num)[:2]
    last_two_digits = str(num)[2:]
    formatted_number = f"{first_two_digits},{last_two_digits}"
    print(formatted_number)

##GENERATE A LIST OF 1000 UNIQUE NUMBERS, BUT THEYRE SEPERATED like (XX, X, X). SO THAT WHEN COMBINED, THE  3 NUMBERS WILL BE UNIQUE AS A KEY. THIS IS FOR A 3 DIFFERENT COLUMNS.
def generate_unique_numbers(num_numbers):
    numbers = set()
    while len(numbers) < num_numbers:
        new_num = random.randint(1001, 9999)
        if '0' not in str(new_num):
            numbers.add(new_num)
    return numbers
# Generating 1000 unique 4-digit numbers without zeros
random_numbers = generate_unique_numbers(1000)
# Printing each number on its own line with the specified formatting
for num in random_numbers:
    first_two_digits = str(num)[:2]
    middle_digit = str(num)[2]
    last_digit = str(num)[3]
    formatted_number = f"{first_two_digits},{middle_digit},{last_digit}"
    print(formatted_number)

## GENERATE A LIST OF DATES OF THE LAST DAY OF THE MONTH, IN 6 DIGIT DATE FORMAT MMDDYY.
import datetime
import random
import calendar
start_date = datetime.date(1990, 1, 1)
end_date = datetime.date(2023, 1, 1)  # Updated to include the last day of 2022
dates = []
current_date = start_date
while current_date < end_date:
    last_day = calendar.monthrange(current_date.year, current_date.month)[1]
    last_date = current_date.replace(day=last_day)
    date_str = last_date.strftime("%m%d%y")
    dates.append(date_str)
    current_date = last_date + datetime.timedelta(days=1)
random.shuffle(dates)
for date in dates[:1000]:  # Limiting the output to the first 1000 dates
    print(date)


## THIS CODE IS FOR ACCOUNT TITLE TO GENERATE A LIST OF ACCOUNT TITLES. THIS IS A RANDOM FARM NAME GENERATOR. IT TAKES AN DESCRIPTOR WORD COMBINES IT WITH A FARM NAME. THIS CODE IS ALSO GENERATED SO THAT THERE ARE NO REPEATS, SO EVERY FARM NAME GENERATED IN THE LIST IS UNIQUE.
import random
adjectives = ["Happy", "Nelson's", "Sunny", "Cloudy", "Elm Tree", "Badger Hill", "Bankers Hill", "Mountain Meadows", "Mountain", "Dry Creek", "Middle Creek", "Serene",
            "Tranquil", "Rustic", "Blissful", "Breezy", "Green Meadow", "Golden", "Radiant", "Harvest", "Delightful", "Coleman", "Smith", "Albert's", "Alberto's", 
              "Jose's", "Gloria's", "Anita's", "Esmeralda's", "Ramaya's", "Maricel's", "Francesco's", "Maria's", "Aisha's", "Abdalah's", "Olivia's", "Eduardo's", "Virginia's",
             "Arizona", "Alaska", "Los Angeles", "Charlotte's", "Carolina's", "Maribel's", "Jasmin's", "Sharon's", "Sauer Family", "Sunset Hill", "Deer Creek",
             "Fly Creek", "Ross Lake", "Salt Lake", "Blue Lake", "Crater Lake", "Butterfly Creek", "Monarch Meadow", "Swallowtail Ponds", "Turtle Pond", "Sparkle Pond", "Smucker's", 
             "Black Mountain", "Blooming Family", "Hudson Family", "Pringle Family", "Webb Family", "Kristen's", "Kathy's", "Hightower Family", "Fulkerson Family", "Fullerton",
             "Jimmy's", "Timmy's"]
nouns = ["Farm", "Farm", "Ranch", "Cattle", "Chickens", "Horses", "Goats", "Vegetable Farm", "Fruit Orchard", "Avocado Farm", "Peach Orchard", "Hills", "Apples", "Oranges", "Creamery", "Acres", "Acre Farms",
"Vineyards", "Honeybees", "Lavender Fields", "Organic Farm", "Sunflower Farms", "Herb Garden", "Pumpkin Patch", "Maple Syrup", "Country Estate", "Mushroom Farm", "Fields", "Homestead", "Juicery", "Egg Farm",
        "Plum Orchard", "Honey Bee Farm", "Cow Farm", "Horse Ranch", "Herb Farm", "Flower Garden", "Squash Farm"]
generated_names = set()
def random_farm_name():
    while True:
        adjective = random.choice(adjectives)
        noun = random.choice(nouns)
        name = f"{adjective} {noun}"
        if name not in generated_names:
            generated_names.add(name)
            return name
# Generate and print 1000 random farm names
for _ in range(1000):
    print(random_farm_name())


## GENERATE RANDOM STATE CODES, CITY CODES, AND ID NUMBER CODES. THE STATE CODES ARE ACCORDING TO THE STATE CODES THE GOVERNMENT HAS MADE, THAT RANGE FROM 1-56. SOME NUMBERS ARE SKIPPED, LIKE 3 AND 7. THE CITY CODES ARE RANDOM 3 DIGIT NUMBERS RANGING FROM 100-999. THE ID NUMBER CODES ARE RANDOM 8 DIGIT NUMBERS. ALL ID NUMBERS WILL BE UNIQUE.
import random
state_codes = [
    '01', '02', '04', '05', '06', '08', '09', '10', '11', '12',
    '13', '15', '16', '17', '18', '19', '20', '21', '22', '23',
    '24', '25', '26', '27', '28', '29', '30', '31', '32', '33',
    '34', '35', '36', '37', '38', '39', '40', '41', '42', '44',
    '45', '46', '47', '48', '49', '50', '51', '53', '54', '55', '56'
]
def generate_data():
    data = []
    used_eight_digits = set()
    for _ in range(1000):
        state_code = random.choice(state_codes)
        three_digits = str(random.randint(100, 999))
        while True:
            eight_digits = str(random.randint(10000000, 99999999))
            if eight_digits not in used_eight_digits:
                used_eight_digits.add(eight_digits)
                break
        row = f"{state_code}, {three_digits}, {eight_digits}"
        data.append(row)
    return data

# Generate 1000 rows of random data
rows = generate_data()

# Print the generated rows
for row in rows:
    print(row)

##GENERATE RANDOM TIMESTAMPS. THIS CODE IS TO GENERATE RANDOM TIMESTAMPS FOR ONE OF THE COLUMNS IN THE DATA. 

import random

timestamps = []
hours = 1
minutes = 0

for _ in range(1000):
    time_str = f"{hours:02d}{minutes:02d}"
    timestamps.append(time_str)
    
    if minutes == 30:
        minutes = 0
        hours += 1
    else:
        minutes = 30
        
    if hours > 23:
        hours = 1

random.shuffle(timestamps)

for timestamp in timestamps:
    print(timestamp)

##GENERATE PYTHON CODE TO GENERATE A RANDOM DATE FROM 01/01/2010-01/01/2015, THEN A RANDOM DATE 10, 20, 30 YEARS LATER. THEN A RANDOM DATE FROM 05/01/23-05/30/23. THEN THE LAST DAY OF THE MONTH OF THE SECOND DATE. THEN A RANDOM DATE RNAGING FROM 01/01/2010-01/01/2023. THE PURPOSE OF THIS CODE IS FOR SOME OF THE COLUMNS IN ONE OF THE TABLES.

# Run the code 1000 times
import random
from datetime import datetime, timedelta

# Run the code 1000 times
for _ in range(1000):
    # Generate the first date
    start_date = datetime.strptime('010110', '%m%d%y')
    end_date = datetime.strptime('010115', '%m%d%y')
    random_days = (end_date - start_date).days
    first_date = start_date + timedelta(days=random.randint(0, random_days))
    first_date_formatted = first_date.strftime('%m%d%y')

    # Generate the second date
    years = [10, 20, 30]
    random_year = random.choice(years)
    second_date = first_date + timedelta(days=365 * random_year)
    second_date_formatted = second_date.strftime('%m%d%y')

    # Generate the third date
    start_date = datetime.strptime('050123', '%m%d%y')
    end_date = datetime.strptime('053023', '%m%d%y')
    random_days = (end_date - start_date).days
    third_date = start_date + timedelta(days=random.randint(0, random_days))
    third_date_formatted = third_date.strftime('%m%d%y')

    # Generate the fourth date (last day of the month)
    last_day_of_month = second_date.replace(day=1, month=second_date.month % 12 + 1) - timedelta(days=1)
    fourth_date_formatted = last_day_of_month.strftime('%m%d%y')

    # Generate the fifth date
    start_date = datetime.strptime('010110', '%m%d%y')
    end_date = datetime.strptime('010123', '%m%d%y')
    random_days = (end_date - start_date).days
    fifth_date = start_date + timedelta(days=random.randint(0, random_days))
    fifth_date_formatted = fifth_date.strftime('%m%d%y')

    # Print the dates separated by commas
    dates = [first_date_formatted, second_date_formatted, third_date_formatted, fourth_date_formatted, fifth_date_formatted]
    print(', '.join(dates))